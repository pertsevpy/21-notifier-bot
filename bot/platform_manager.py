"""–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π 21-school
(–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–º–ø—É—Å–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)"""

import json
import logging
from datetime import datetime, timedelta
from logging import Logger
from typing import Dict, List, Optional

import requests
import requests.adapters

from bot.config_manager import ConfigManager
from bot.selenium_utils import SeleniumManager

logger: Logger = logging.getLogger(__name__)


class SchoolPlatformManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π 21-school"""

    def __init__(self, config_manager: ConfigManager):
        self.config_manager = config_manager
        self.token = None
        self.token_expiry = None
        self.last_notification_ids = set()
        self.session = requests.Session()
        self.campuses = []
        self.selenium_manager = SeleniumManager()

        retry_strategy = requests.adapters.Retry(
            total=3,
            backoff_factor=1,
            status_forcelist=[429, 500, 502, 503, 504],
        )
        adapter = requests.adapters.HTTPAdapter(max_retries=retry_strategy)
        self.session.mount("http://", adapter)
        self.session.mount("https://", adapter)

    def login_via_api(
        self, login: str = None, password: str = None
    ) -> Optional[str]:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API Keycloak"""
        login, password = self._get_credentials(login, password)
        if not login or not password:
            return None

        return self._perform_api_authentication(login, password)

    def _get_credentials(self, login: str, password: str) -> tuple:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        login = login or self.config_manager.config["platform_login"]
        password = password or self.config_manager.config["platform_password"]

        if not login or not password:
            logger.error("–õ–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return None, None

        return login, password

    def _perform_api_authentication(
        self, login: str, password: str
    ) -> Optional[str]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API"""
        url, payload, headers = self._prepare_api_request(login, password)

        try:
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API...")
            response = self.session.post(
                url, headers=headers, data=payload, timeout=15
            )
            return self._handle_api_response(response)
        except requests.exceptions.RequestException as e:
            self._handle_request_exception(e)
            return None
        except json.JSONDecodeError as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ API: %s", e)
            return None
        except Exception as e:
            logger.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %s", e)
            return None

    @staticmethod
    def _prepare_api_request(login: str, password: str) -> tuple:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        # pylint: disable-next=line-too-long
        url = "https://auth.21-school.ru/auth/realms/EduPowerKeycloak/protocol/openid-connect/token"

        payload = {
            "client_id": "s21-open-api",
            "username": login,
            "password": password,
            "grant_type": "password",
        }

        headers = {"Content-Type": "application/x-www-form-urlencoded"}

        return url, payload, headers

    @staticmethod
    def _handle_api_response(response) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"""
        response.raise_for_status()
        data = response.json()
        access_token = data.get("access_token")

        if access_token:
            logger.info("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ API")
            return access_token

        logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API")
        return None

    def _handle_request_exception(self, e: Exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ"""
        logger.error("‚ùå –û—à–∏–±–∫–∞ API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %s", e)

        if hasattr(e, "response") and e.response is not None:
            self._handle_http_error(e.response.status_code)

    @staticmethod
    def _handle_http_error(status_code: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫"""
        error_messages = {
            401: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            400: "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API",
        }

        if status_code in error_messages:
            logger.error(error_messages[status_code])
        elif status_code >= 500:
            logger.error("–ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

    def login_and_get_token(
        self, login: str = None, password: str = None
    ) -> Optional[str]:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º API, fallback –Ω–∞ Selenium"""
        login = login or self.config_manager.config["platform_login"]
        password = password or self.config_manager.config["platform_password"]

        if not login or not password:
            logger.error("–õ–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return None

        logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API...")
        api_token = self.login_via_api(login, password)

        if api_token:
            self.token = api_token
            self.token_expiry = datetime.now() + timedelta(hours=10)
            logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API —É—Å–ø–µ—à–Ω–∞")
            return api_token

        logger.warning(
            "‚ùå API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Selenium..."
        )
        selenium_token = self.login_via_selenium(login, password)

        if selenium_token:
            self.token = selenium_token
            self.token_expiry = datetime.now() + timedelta(hours=23)
            logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Selenium —É—Å–ø–µ—à–Ω–∞")
            return selenium_token

        logger.error("‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å")
        return None

    def login_via_selenium(self, login: str, password: str) -> Optional[str]:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Selenium (fallback –º–µ—Ç–æ–¥)"""
        return self.selenium_manager.login_via_selenium(login, password)

    def validate_token(self, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API –∫–∞–º–ø—É—Å–æ–≤"""
        if not token:
            return False

        url = (
            "https://platform.21-school.ru/services/21-school/api/v1/campuses"
        )

        headers = {
            "Authorization": f"Bearer {token}",
            "User-Agent": "Mozilla/5.0 (compatible; SchoolNotifier/1.0)",
        }

        try:
            response = self.session.get(url, headers=headers, timeout=10)
            return response.status_code == 200
        except (
            requests.exceptions.RequestException,
            requests.exceptions.Timeout,
            requests.exceptions.ConnectionError,
            requests.exceptions.HTTPError,
        ) as e:
            logger.debug("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: %s", e)
            return False

    def get_campuses(self) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø—É—Å–æ–≤ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        if not self.token:
            logger.error("–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–ø—É—Å–æ–≤")
            return None

        if not self.validate_token(self.token):
            logger.warning("–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è...")
            new_token = self.login_and_get_token()
            if not new_token:
                logger.error(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–ø—É—Å–æ–≤"
                )
                return None
            self.token = new_token

        url = (
            "https://platform.21-school.ru/services/21-school/api/v1/campuses"
        )

        headers = {
            "Authorization": f"Bearer {self.token}",
            "User-Agent": "Mozilla/5.0 (compatible; SchoolNotifier/1.0)",
        }

        try:
            response = self.session.get(url, headers=headers, timeout=15)
            response.raise_for_status()

            data = response.json()
            campuses = data.get("campuses", [])

            logger.info("–ü–æ–ª—É—á–µ–Ω–æ %d –∫–∞–º–ø—É—Å–æ–≤", len(campuses))
            self.campuses = campuses
            return campuses

        except requests.exceptions.RequestException as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø—É—Å–æ–≤: %s", e)
            return None
        except json.JSONDecodeError as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∫–∞–º–ø—É—Å–æ–≤: %s", e)
            return None

    def get_notifications(self) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.token:
            logger.error("–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return None

        school_id = self.config_manager.config["school_id"]
        if not school_id:
            logger.error("School ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return None

        url = "https://platform.21-school.ru/services/graphql"

        payload = {
            "operationName": "getUserNotifications",
            "variables": {"paging": {"offset": 0, "limit": 50}},
            "query": """query getUserNotifications($paging: PagingInput!) {
                s21Notification {
                    getS21Notifications(paging: $paging) {
                        notifications {
                            id
                            relatedObjectType
                            relatedObjectId
                            message
                            time
                            wasRead
                            groupName
                            __typename
                        }
                        totalCount
                        groupNames
                        __typename
                    }
                    __typename
                }
            }""",
        }

        headers = {
            "userrole": "STUDENT",
            "accept": "application/json",
            "content-type": "application/json",
            "schoolid": school_id,
            "Authorization": f"Bearer {self.token}",
            "User-Agent": "Mozilla/5.0 (compatible; SchoolNotifier/1.0)",
        }

        try:
            response = self.session.post(
                url, json=payload, headers=headers, timeout=15
            )
            response.raise_for_status()

            data = response.json()

            if "errors" in data:
                logger.error("GraphQL –æ—à–∏–±–∫–∏: %s", data["errors"])
                return None

            notifications = (
                data.get("data", {})
                .get("s21Notification", {})
                .get("getS21Notifications", {})
                .get("notifications", [])
            )
            return notifications

        except requests.exceptions.RequestException as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)
            return None
        except json.JSONDecodeError as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %s", e)
            return None

    def get_new_notifications(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        current_notifications = self.get_notifications()
        if not current_notifications:
            return []

        current_ids = {n["id"] for n in current_notifications}

        if not self.last_notification_ids:
            self.last_notification_ids = current_ids
            return []

        new_ids = current_ids - self.last_notification_ids
        new_notifications = [
            n for n in current_notifications if n["id"] in new_ids
        ]

        self.last_notification_ids = current_ids

        return new_notifications

    def get_last_notification(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ GraphQL API"""
        if not self.token:
            logger.error("–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return None

        if not self.validate_token(self.token):
            logger.warning(
                "–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, "
                "–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è..."
            )
            new_token = self.login_and_get_token()
            if not new_token:
                logger.error(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
                )
                return None
            self.token = new_token

        school_id = self.config_manager.config["school_id"]
        if not school_id:
            logger.error("School ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return None

        url = "https://platform.21-school.ru/services/graphql"

        payload = {
            "operationName": "getUserNotifications",
            "variables": {"paging": {"offset": 0, "limit": 1}},
            "query": """query getUserNotifications($paging: PagingInput!) {
                s21Notification {
                    getS21Notifications(paging: $paging) {
                        notifications {
                            id
                            relatedObjectType
                            relatedObjectId
                            message
                            time
                            wasRead
                            groupName
                            __typename
                        }
                        totalCount
                        groupNames
                        __typename
                    }
                    __typename
                }
            }""",
        }

        headers = {
            "userrole": "STUDENT",
            "accept": "application/json",
            "content-type": "application/json",
            "schoolid": school_id,
            "Authorization": f"Bearer {self.token}",
            "User-Agent": "Mozilla/5.0 (compatible; SchoolNotifier/1.0)",
        }

        try:
            logger.info("–ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
            response = self.session.post(
                url, json=payload, headers=headers, timeout=15
            )
            response.raise_for_status()

            data = response.json()

            if "errors" in data:
                logger.error(
                    "GraphQL –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s",
                    data["errors"],
                )
                return None

            notifications = (
                data.get("data", {})
                .get("s21Notification", {})
                .get("getS21Notifications", {})
                .get("notifications", [])
            )

            if notifications:
                last_notification = notifications[0]
                logger.info(
                    "–ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: %s",
                    last_notification["id"],
                )
                return last_notification

            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç")
            return None

        except requests.exceptions.RequestException as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s", e)
            return None
        except json.JSONDecodeError as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s", e)
            return None
