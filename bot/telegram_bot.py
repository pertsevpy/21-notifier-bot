"""–õ–æ–≥–∏–∫–∞ Telegram-–±–æ—Ç–∞, –≤–∫–ª—é—á–∞—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""

import logging
from enum import Enum
from typing import Dict, List
import asyncio
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

from .config_manager import ConfigManager
from .platform_manager import SchoolPlatformManager
from .utils import convert_utc_to_local, clean_html, escape_markdown

logger = logging.getLogger(__name__)


class BotStates(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler"""

    MAIN_MENU = 0
    SETTING_LOGIN = 1
    SETTING_PASSWORD = 2
    SELECTING_CAMPUS = 3
    CONFIRM_SETTINGS = 4
    TEST_AUTH = 5


class TelegramSchoolNotifier:
    """Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö 21-school"""

    def __init__(self, telegram_token: str):
        self.telegram_token = telegram_token
        self.config_manager = ConfigManager()
        self.platform_manager = SchoolPlatformManager(self.config_manager)
        self.scheduler = AsyncIOScheduler()
        self.application = None
        self.is_running = False

        self.stats = {
            "last_check": None,
            "total_checks": 0,
            "notifications_sent": 0,
            "errors": 0,
        }

        self.setup_admin_chat_id()

    def setup_admin_chat_id(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ admin_chat_id –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
        if not self.config_manager.config["admin_chat_id"]:
            logger.info(
                "Admin chat ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, "
                "–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"
            )

    def get_main_menu_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [
            ["üìä –°—Ç–∞—Ç—É—Å"],
            ["‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫", "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞"],
            ["üîê –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"],
            ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üîî –ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"],
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    def get_settings_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        keyboard = [
            ["üë§ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏–Ω", "üîë –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å"],
            ["üè´ –í—ã–±—Ä–∞—Ç—å –∫–∞–º–ø—É—Å", "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"],
            ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    def get_campuses_keyboard(
        self, campuses: List[Dict]
    ) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–º–ø—É—Å–∞–º–∏"""
        keyboard = []
        current_row = []

        for i, campus in enumerate(campuses):
            campus_name = campus["fullName"]
            if len(campus_name) > 30:
                campus_name = campus_name[:27] + "..."

            current_row.append(campus_name)

            if len(current_row) >= 2 or i == len(campuses) - 1:
                keyboard.append(current_row)
                current_row = []

        keyboard.append(["üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"])
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    async def start_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = str(update.effective_chat.id)

        if not self.config_manager.config["admin_chat_id"]:
            self.config_manager.update_setting("admin_chat_id", chat_id)
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! "
                "–í—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π "
                "21-school.",
                reply_markup=self.get_main_menu_keyboard(),
            )
        else:
            if chat_id != self.config_manager.config["admin_chat_id"]:
                await update.message.reply_text(
                    "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º"
                )
                return

            await update.message.reply_text(
                "ü§ñ –ë–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π 21-school –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
                reply_markup=self.get_main_menu_keyboard(),
            )

    async def stop_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        await self.stop_monitoring(update, context)

    async def status_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        await self.status(update, context)

    async def open_settings_menu(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏"""
        chat_id = str(update.effective_chat.id)
        if chat_id != self.config_manager.config["admin_chat_id"]:
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º"
            )
            return

        await update.message.reply_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã 21-school:",
            reply_markup=self.get_settings_keyboard(),
        )

    async def request_login(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ó–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞"""
        chat_id = str(update.effective_chat.id)
        if chat_id != self.config_manager.config["admin_chat_id"]:
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º"
            )
            return

        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã 21-school:",
            reply_markup=ReplyKeyboardRemove(),
        )
        context.user_data["awaiting_login"] = True

    async def request_password(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è"""
        chat_id = str(update.effective_chat.id)
        if chat_id != self.config_manager.config["admin_chat_id"]:
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º"
            )
            return

        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã 21-school:",
            reply_markup=ReplyKeyboardRemove(),
        )
        context.user_data["awaiting_password"] = True

    async def back_to_main_menu(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        chat_id = str(update.effective_chat.id)
        if chat_id != self.config_manager.config["admin_chat_id"]:
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º"
            )
            return

        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=self.get_main_menu_keyboard()
        )

    async def handle_text_input(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ (–ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å, –≤—ã–±–æ—Ä –∫–∞–º–ø—É—Å–∞)"""
        chat_id = str(update.effective_chat.id)
        if chat_id != self.config_manager.config["admin_chat_id"]:
            return

        text = update.message.text
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞: '{text}'")

        if context.user_data.get("awaiting_campus_selection"):
            logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞–º–ø—É—Å–∞")
            await self.handle_campus_selection(update, context)
            return

        if context.user_data.get("awaiting_login"):
            self.config_manager.update_setting("platform_login", text)
            await update.message.reply_text(
                f"‚úÖ –õ–æ–≥–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {text}",
                reply_markup=self.get_settings_keyboard(),
            )
            context.user_data["awaiting_login"] = False
            logger.info("–õ–æ–≥–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        elif context.user_data.get("awaiting_password"):
            self.config_manager.update_setting("platform_password", text)
            await update.message.reply_text(
                "‚úÖ –ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                reply_markup=self.get_settings_keyboard(),
            )
            context.user_data["awaiting_password"] = False
            logger.info("–ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def select_campus(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–í—ã–±–æ—Ä –∫–∞–º–ø—É—Å–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        chat_id = str(update.effective_chat.id)
        if chat_id != self.config_manager.config["admin_chat_id"]:
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º"
            )
            return

        logger.info("–ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –∫–∞–º–ø—É—Å–∞...")

        if (
            not self.config_manager.config["platform_login"]
            or not self.config_manager.config["platform_password"]
        ):
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
                reply_markup=self.get_settings_keyboard(),
            )
            return

        await update.message.reply_text(
            "üîê –í—ã–ø–æ–ª–Ω—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø—É—Å–æ–≤..."
        )

        token = self.platform_manager.login_and_get_token()
        if not token:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.",
                reply_markup=self.get_settings_keyboard(),
            )
            return

        campuses = self.platform_manager.get_campuses()
        if not campuses:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø—É—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.get_settings_keyboard(),
            )
            return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(campuses)} –∫–∞–º–ø—É—Å–æ–≤")

        context.user_data["campuses"] = campuses
        context.user_data["awaiting_campus_selection"] = True

        keyboard = self.get_campuses_keyboard(campuses)

        await update.message.reply_text(
            "üè´ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–∞–º–ø—É—Å –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard
        )

        logger.info("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞–º–ø—É—Å–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    async def handle_campus_selection(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–º–ø—É—Å–∞"""
        chat_id = str(update.effective_chat.id)
        if chat_id != self.config_manager.config["admin_chat_id"]:
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º"
            )
            return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")

        selected_campus_name = update.message.text

        if selected_campus_name == "üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º":
            await update.message.reply_text(
                "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º:",
                reply_markup=self.get_settings_keyboard(),
            )
            context.user_data["awaiting_campus_selection"] = False
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")
            return

        campuses = context.user_data.get("campuses", [])
        logger.info(f"–ò—â–µ–º –∫–∞–º–ø—É—Å –≤ —Å–ø–∏—Å–∫–µ –∏–∑ {len(campuses)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

        selected_campus = None

        for campus in campuses:
            if campus["fullName"] == selected_campus_name:
                selected_campus = campus
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {campus['fullName']}")
                break

        if not selected_campus:
            for campus in campuses:
                if selected_campus_name in campus["fullName"]:
                    selected_campus = campus
                    logger.info(
                        f"–ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {campus['fullName']}"
                    )
                    break

        if not selected_campus:
            for campus in campuses:
                if selected_campus_name == campus["shortName"]:
                    selected_campus = campus
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ shortName: {campus['shortName']}")
                    break

        if selected_campus:
            self.config_manager.update_setting(
                "school_id", selected_campus["id"]
            )
            self.config_manager.update_setting(
                "campus_name", selected_campus["fullName"]
            )

            logger.info(
                f"–ö–∞–º–ø—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ID={selected_campus['id']}, "
                f"Name={selected_campus['fullName']}"
            )

            await update.message.reply_text(
                f"‚úÖ –ö–∞–º–ø—É—Å –≤—ã–±—Ä–∞–Ω:\n\n"
                f"üè´ {selected_campus['fullName']}\n"
                f"üîó ID: {selected_campus['id']}",
                reply_markup=self.get_settings_keyboard(),
            )
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–±–æ—Ä–µ –∫–∞–º–ø—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            logger.warning(f"–ö–∞–º–ø—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: '{selected_campus_name}'")
            await update.message.reply_text(
                "‚ùå –ö–∞–º–ø—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.",
                reply_markup=self.get_campuses_keyboard(campuses),
            )

        context.user_data["awaiting_campus_selection"] = False

    async def show_settings(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        config = self.config_manager.config
        is_complete, missing = self.config_manager.get_config_status()

        status = (
            "‚úÖ –ü–æ–ª–Ω–∞—è"
            if is_complete
            else f"‚ùå –ù–µ–ø–æ–ª–Ω–∞—è (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {', '.join(missing)})"
        )

        settings_text = f"""
‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**

üë§ **–õ–æ–≥–∏–Ω:** `{config['platform_login'] or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`
üîë **–ü–∞—Ä–æ–ª—å:** `{'*' * 8 if config['platform_password'] else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`
üè´ **–ö–∞–º–ø—É—Å:** {config['campus_name'] or '–ù–µ –≤—ã–±—Ä–∞–Ω'}
üëë **Admin Chat ID:** `{config['admin_chat_id'] or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`

üìä **–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:** {status}
üïê **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {config['last_update'] or '–ù–∏–∫–æ–≥–¥–∞'}
        """

        await update.message.reply_text(settings_text, parse_mode="Markdown")

    async def start_monitoring(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        chat_id = str(update.effective_chat.id)
        if chat_id != self.config_manager.config["admin_chat_id"]:
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º"
            )
            return

        is_complete, missing = self.config_manager.get_config_status()
        if not is_complete:
            await update.message.reply_text(
                f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è! –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: "
                f"{', '.join(missing)}\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º."
            )
            return

        if self.is_running:
            await update.message.reply_text("ü§ñ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return

        self.is_running = True

        auth_result = await self.daily_auth()
        if not auth_result:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
            self.is_running = False
            return

        self.scheduler.add_job(
            self.daily_auth, CronTrigger(hour=8, minute=0), id="daily_auth"
        )

        self.scheduler.add_job(
            self.check_notifications,
            IntervalTrigger(minutes=5),
            id="check_notifications",
        )

        self.scheduler.start()

        campus_name = self.config_manager.config["campus_name"]
        await update.message.reply_text(
            f"üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞–º–ø—É—Å–∞: {campus_name}!\n\n"
            "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: 8:00\n"
            "üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"
        )

        logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞–º–ø—É—Å–∞: {campus_name}")

    async def stop_monitoring(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        chat_id = str(update.effective_chat.id)
        if chat_id != self.config_manager.config["admin_chat_id"]:
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º"
            )
            return

        if not self.is_running:
            await update.message.reply_text("ü§ñ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return

        self.is_running = False
        self.scheduler.shutdown()

        await update.message.reply_text("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def test_auth(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        chat_id = str(update.effective_chat.id)
        if chat_id != self.config_manager.config["admin_chat_id"]:
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º"
            )
            return

        await update.message.reply_text("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

        token = self.platform_manager.login_and_get_token()
        if token:
            campuses = self.platform_manager.get_campuses()
            campus_count = len(campuses) if campuses else 0

            current_campus = self.config_manager.config["campus_name"]
            campus_info = (
                f"\nüè´ –¢–µ–∫—É—â–∏–π –∫–∞–º–ø—É—Å: {current_campus}"
                if current_campus
                else ""
            )

            await update.message.reply_text(
                f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
                f"–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:30]}...\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ –∫–∞–º–ø—É—Å–æ–≤: {campus_count}"
                f"{campus_info}"
            )

            if campuses and current_campus:
                campuses_text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–º–ø—É—Å—ã:\n"
                for i, campus in enumerate(campuses[:10], 1):
                    campuses_text += f"{i}. {campus['fullName']}\n"

                if len(campuses) > 10:
                    campuses_text += f"... –∏ –µ—â–µ {len(campuses) - 10} –∫–∞–º–ø—É—Å–æ–≤"

                await update.message.reply_text(campuses_text)
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è\n"
                "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ 21-school"
            )

    async def reset_settings(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        chat_id = str(update.effective_chat.id)
        if chat_id != self.config_manager.config["admin_chat_id"]:
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º"
            )
            return

        admin_chat_id = self.config_manager.config["admin_chat_id"]
        self.config_manager.config = {
            "platform_login": "",
            "platform_password": "",
            "school_id": "",
            "campus_name": "",
            "admin_chat_id": admin_chat_id,
            "is_configured": False,
            "last_update": datetime.now(),
            "timezone": "Europe/Moscow",
        }
        self.config_manager.save_config()

        await update.message.reply_text("üîÑ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!")

    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        chat_id = str(update.effective_chat.id)
        if chat_id != self.config_manager.config["admin_chat_id"]:
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º"
            )
            return

        status_text = "üü¢ –ó–∞–ø—É—â–µ–Ω" if self.is_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        is_complete, missing = self.config_manager.get_config_status()
        config_status = "‚úÖ –ü–æ–ª–Ω–∞—è" if is_complete else f"‚ùå –ù–µ–ø–æ–ª–Ω–∞—è"
        campus_name = self.config_manager.config["campus_name"] or "–ù–µ –≤—ã–±—Ä–∞–Ω"

        stats_text = f"""
ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**: {status_text}
‚öôÔ∏è **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è**: {config_status}
üè´ **–ö–∞–º–ø—É—Å**: {campus_name}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {self.stats['last_check'] or '–ù–∏–∫–æ–≥–¥–∞'}
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {self.stats['total_checks']}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {self.stats['notifications_sent']}
‚Ä¢ –û—à–∏–±–æ–∫: {self.stats['errors']}

üîê **–¢–æ–∫–µ–Ω –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:** {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if self.platform_manager.token else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
üìÖ **–°–ª–µ–¥—É—é—â–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:** {self.platform_manager.token_expiry or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
        """

        await update.message.reply_text(stats_text)

    async def daily_auth(self) -> bool:
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        logger.info("–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

        try:
            token = self.platform_manager.login_and_get_token()

            if token:
                message = "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!"
                logger.info(message)
                return True
            else:
                message = "‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!"
                logger.error(message)
                return False

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            self.stats["errors"] += 1
            return False

    async def check_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.is_running:
            return

        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        self.stats["total_checks"] += 1
        self.stats["last_check"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        try:
            if (
                not self.platform_manager.token
                or not self.platform_manager.token_expiry
                or self.platform_manager.token_expiry < datetime.now()
            ):
                logger.warning("–¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
                await self.daily_auth()
                await asyncio.sleep(5)

            new_notifications = self.platform_manager.get_new_notifications()

            if new_notifications:
                logger.info(
                    f"–ù–∞–π–¥–µ–Ω–æ {len(new_notifications)} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
                )

                for notification in new_notifications:
                    await self.send_notification(notification)

                self.stats["notifications_sent"] += len(new_notifications)
            else:
                logger.info("–ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            self.stats["errors"] += 1

    async def send_notification(self, notification: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            message_text = self.format_notification_message(notification)

            admin_chat_id = self.config_manager.config["admin_chat_id"]
            if admin_chat_id:
                try:
                    await self.application.bot.send_message(
                        chat_id=admin_chat_id,
                        text=message_text,
                        parse_mode="MarkdownV2",
                    )
                    logger.info(
                        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification['id']}"
                    )
                except Exception as markdown_error:
                    logger.warning(
                        f"MarkdownV2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º HTML: {markdown_error}"
                    )
                    html_message = self.format_notification_html(notification)
                    try:
                        await self.application.bot.send_message(
                            chat_id=admin_chat_id,
                            text=html_message,
                            parse_mode="HTML",
                        )
                        logger.info(
                            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ HTML: {notification['id']}"
                        )
                    except Exception as html_error:
                        logger.warning(
                            f"HTML –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {html_error}"
                        )
                        plain_message = self.format_notification_plain(
                            notification
                        )
                        await self.application.bot.send_message(
                            chat_id=admin_chat_id,
                            text=plain_message,
                            parse_mode=None,
                        )
                        logger.info(
                            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: "
                            f"{notification['id']}"
                        )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            self.stats["errors"] += 1

    def format_notification_message(self, notification: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            timezone_str = self.config_manager.config.get(
                "timezone", "Europe/Moscow"
            )
            time_str = convert_utc_to_local(
                notification["time"], timezone_str
            )  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ utils
            message_text = clean_html(notification["message"])

            escaped_time = escape_markdown(time_str)
            escaped_type = escape_markdown(
                notification.get("groupName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            )
            escaped_message = escape_markdown(message_text)
            escaped_id = escape_markdown(notification["id"])

            formatted_message = (
                f"üîî *–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ* üîî\n"
                f"üìÖ *–í—Ä–µ–º—è:* {escaped_time}\n"
                f"üìã *–¢–∏–ø:* {escaped_type}\n"
                f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n"
                f"{escaped_message}\n"
                f"üÜî *ID:* `{escaped_id}`"
            )

            return formatted_message.strip()

        except Exception as e:
            return (
                f"üîî –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n"
                f"{e}\n"
                f"–í—Ä–µ–º—è: {notification.get('time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"–¢–∏–ø: {notification.get('groupName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {notification.get('message', '')}"
            )

    def format_notification_html(self, notification: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ HTML"""
        timezone_str = self.config_manager.config.get(
            "timezone", "Europe/Moscow"
        )
        time_str = convert_utc_to_local(notification["time"], timezone_str)
        message_text = clean_html(notification["message"])

        return (
            f"<b>üîî –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n"
            f"<b>üìÖ –í—Ä–µ–º—è:</b> {time_str}\n"
            f"<b>üìã –¢–∏–ø:</b> {notification.get('groupName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"<b>üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message_text}\n"
            f"<b>üÜî ID:</b> <code>{notification['id']}</code>"
        )

    def format_notification_plain(self, notification: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏"""
        timezone_str = self.config_manager.config.get(
            "timezone", "Europe/Moscow"
        )
        time_str = convert_utc_to_local(notification["time"], timezone_str)
        message_text = clean_html(notification["message"])

        return (
            f"üîî –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
            f"–í—Ä–µ–º—è: {time_str}\n"
            f"–¢–∏–ø: {notification.get('groupName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message_text}\n"
            f"ID: {notification['id']}"
        )

    async def last_notification_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'"""
        chat_id = str(update.effective_chat.id)
        if chat_id != self.config_manager.config["admin_chat_id"]:
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º"
            )
            return

        await self.show_last_notification(update, context)

    async def show_last_notification(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        if not self.config_manager.config["school_id"]:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø—É—Å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                reply_markup=self.get_settings_keyboard(),
            )
            return

        await update.message.reply_text(
            "üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ..."
        )

        try:
            last_notification = self.platform_manager.get_last_notification()

            if last_notification:
                message_text = self.format_notification_message(
                    last_notification
                )

                try:
                    await update.message.reply_text(
                        text=message_text, parse_mode="MarkdownV2"
                    )
                    logger.info(
                        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {last_notification['id']}"
                    )
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å Markdown: {e}"
                    )
                    plain_text = self.format_notification_plain(
                        last_notification
                    )
                    await update.message.reply_text(plain_text)
            else:
                await update.message.reply_text(
                    "üì≠ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç.\n"
                    "–ö–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, "
                    "–æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å."
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
                "‚Ä¢ –í—ã–±–æ—Ä –∫–∞–º–ø—É—Å–∞\n"
                "‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
            )

    def run(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = (
            Application.builder().token(self.telegram_token).build()
        )

        self.application.add_handler(
            CommandHandler("start", self.start_command)
        )
        self.application.add_handler(CommandHandler("stop", self.stop_command))
        self.application.add_handler(
            CommandHandler("status", self.status_command)
        )

        self.application.add_handler(
            MessageHandler(
                filters.Regex("^‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏$"), self.open_settings_menu
            )
        )
        self.application.add_handler(
            MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç—É—Å$"), self.status_command)
        )
        self.application.add_handler(
            MessageHandler(filters.Regex("^‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫$"), self.start_monitoring)
        )
        self.application.add_handler(
            MessageHandler(filters.Regex("^‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞$"), self.stop_command)
        )
        self.application.add_handler(
            MessageHandler(
                filters.Regex("^üîê –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏$"), self.test_auth
            )
        )
        self.application.add_handler(
            MessageHandler(
                filters.Regex("^üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫$"), self.reset_settings
            )
        )

        self.application.add_handler(
            MessageHandler(
                filters.Regex("^üë§ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏–Ω$"), self.request_login
            )
        )
        self.application.add_handler(
            MessageHandler(
                filters.Regex("^üîë –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å$"), self.request_password
            )
        )
        self.application.add_handler(
            MessageHandler(
                filters.Regex("^üè´ –í—ã–±—Ä–∞—Ç—å –∫–∞–º–ø—É—Å$"), self.select_campus
            )
        )
        self.application.add_handler(
            MessageHandler(
                filters.Regex("^‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏$"), self.show_settings
            )
        )
        self.application.add_handler(
            MessageHandler(
                filters.Regex("^üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), self.back_to_main_menu
            )
        )
        self.application.add_handler(
            MessageHandler(
                filters.Regex("^üîî –ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ$"),
                self.last_notification_command,
            )
        )

        self.application.add_handler(
            MessageHandler(
                filters.TEXT & ~filters.COMMAND, self.handle_text_input
            )
        )

        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.application.run_polling()
